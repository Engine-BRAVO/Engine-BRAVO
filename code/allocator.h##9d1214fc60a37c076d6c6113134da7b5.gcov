        -:    0:Source:/usr/include/c++/13/bits/allocator.h
        -:    0:Graph:build/external/BehaviorTree/CMakeFiles/behaviortree_cpp.dir/src/blackboard.cpp.gcno
        -:    0:Data:build/external/BehaviorTree/CMakeFiles/behaviortree_cpp.dir/src/blackboard.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505L
        -:   53:
        -:   54:namespace std _GLIBCXX_VISIBILITY(default)
        -:   55:{
        -:   56:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   57:
        -:   58:  /**
        -:   59:   *  @addtogroup allocators
        -:   60:   *  @{
        -:   61:   */
        -:   62:
        -:   63:  // Since C++20 the primary template should be used for allocator<void>,
        -:   64:  // but then it would have a non-trivial default ctor and dtor for C++20,
        -:   65:  // but trivial for C++98-17, which would be an ABI incompatibility between
        -:   66:  // different standard dialects. So C++20 still uses the allocator<void>
        -:   67:  // explicit specialization, with the historical ABI properties, but with
        -:   68:  // the same members that are present in the primary template.
        -:   69:
        -:   70:  /** std::allocator<void> specialization.
        -:   71:   *
        -:   72:   * @headerfile memory
        -:   73:   */
        -:   74:  template<>
        -:   75:    class allocator<void>
        -:   76:    {
        -:   77:    public:
        -:   78:      typedef void        value_type;
        -:   79:      typedef size_t      size_type;
        -:   80:      typedef ptrdiff_t   difference_type;
        -:   81:
        -:   82:#if __cplusplus <= 201703L
        -:   83:      // These were removed for C++20, allocator_traits does the right thing.
        -:   84:      typedef void*       pointer;
        -:   85:      typedef const void* const_pointer;
        -:   86:
        -:   87:      template<typename _Tp1>
        -:   88:	struct rebind
        -:   89:	{ typedef allocator<_Tp1> other; };
        -:   90:#endif
        -:   91:
        -:   92:#if __cplusplus >= 201103L
        -:   93:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   94:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   95:      using propagate_on_container_move_assignment = true_type;
        -:   96:
        -:   97:      using is_always_equal
        -:   98:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:   99:	= true_type;
        -:  100:
        -:  101:#if __cplusplus >= 202002L
        -:  102:      // As noted above, these members are present for C++20 to provide the
        -:  103:      // same API as the primary template, but still trivial as in pre-C++20.
        -:  104:      allocator() = default;
        -:  105:      ~allocator() = default;
        -:  106:
        -:  107:      template<typename _Up>
        -:  108:	__attribute__((__always_inline__))
        -:  109:	constexpr
        -:  110:	allocator(const allocator<_Up>&) noexcept { }
        -:  111:
        -:  112:      // No allocate member because it's ill-formed by LWG 3307.
        -:  113:      // No deallocate member because it would be undefined to call it
        -:  114:      // with any pointer which wasn't obtained from allocate.
        -:  115:#endif // C++20
        -:  116:#endif // C++11
        -:  117:    };
        -:  118:
        -:  119:  /**
        -:  120:   * @brief  The @a standard allocator, as per C++03 [20.4.1].
        -:  121:   *
        -:  122:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  123:   *  for further details.
        -:  124:   *
        -:  125:   *  @tparam  _Tp  Type of allocated object.
        -:  126:   *
        -:  127:   *  @headerfile memory
        -:  128:   */
        -:  129:  template<typename _Tp>
        -:  130:    class allocator : public __allocator_base<_Tp>
        -:  131:    {
        -:  132:    public:
        -:  133:      typedef _Tp        value_type;
        -:  134:      typedef size_t     size_type;
        -:  135:      typedef ptrdiff_t  difference_type;
        -:  136:
        -:  137:#if __cplusplus <= 201703L
        -:  138:      // These were removed for C++20.
        -:  139:      typedef _Tp*       pointer;
        -:  140:      typedef const _Tp* const_pointer;
        -:  141:      typedef _Tp&       reference;
        -:  142:      typedef const _Tp& const_reference;
        -:  143:
        -:  144:      template<typename _Tp1>
        -:  145:	struct rebind
        -:  146:	{ typedef allocator<_Tp1> other; };
        -:  147:#endif
        -:  148:
        -:  149:#if __cplusplus >= 201103L
        -:  150:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  151:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  152:      using propagate_on_container_move_assignment = true_type;
        -:  153:
        -:  154:      using is_always_equal
        -:  155:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:  156:	= true_type;
        -:  157:#endif
        -:  158:
        -:  159:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  160:      // 3035. std::allocator's constructors should be constexpr
        -:  161:      __attribute__((__always_inline__))
        -:  162:      _GLIBCXX20_CONSTEXPR
      56*:  163:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  163-block  0
    %%%%%:  163-block  1
    %%%%%:  163-block  2
    %%%%%:  163-block  3
    %%%%%:  163-block  4
    %%%%%:  163-block  5
    %%%%%:  163-block  6
    %%%%%:  163-block  7
    %%%%%:  163-block  8
    %%%%%:  163-block  9
    %%%%%:  163-block 10
    %%%%%:  163-block 11
    %%%%%:  163-block 12
    %%%%%:  163-block 13
    %%%%%:  163-block 14
    %%%%%:  163-block 15
       56:  163-block 16
    %%%%%:  163-block 17
    %%%%%:  163-block 18
    %%%%%:  163-block 19
    %%%%%:  163-block 20
    %%%%%:  163-block 21
    %%%%%:  163-block 22
    %%%%%:  163-block 23
    %%%%%:  163-block 24
    %%%%%:  163-block 25
    %%%%%:  163-block 26
    %%%%%:  163-block 27
    %%%%%:  163-block 28
    %%%%%:  163-block 29
    %%%%%:  163-block 30
    %%%%%:  163-block 31
    %%%%%:  163-block 32
    %%%%%:  163-block 33
        -:  164:
        -:  165:      __attribute__((__always_inline__))
        -:  166:      _GLIBCXX20_CONSTEXPR
        -:  167:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    #####:  168:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  168-block  0
    %%%%%:  168-block  1
    %%%%%:  168-block  2
    %%%%%:  168-block  3
    %%%%%:  168-block  4
        -:  169:
        -:  170:#if __cplusplus >= 201103L
        -:  171:      // Avoid implicit deprecation.
        -:  172:      allocator& operator=(const allocator&) = default;
        -:  173:#endif
        -:  174:
        -:  175:      template<typename _Tp1>
        -:  176:	__attribute__((__always_inline__))
        -:  177:	_GLIBCXX20_CONSTEXPR
    #####:  178:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
    %%%%%:  178-block  0
    %%%%%:  178-block  1
    %%%%%:  178-block  2
    %%%%%:  178-block  3
    %%%%%:  178-block  4
    %%%%%:  178-block  5
    %%%%%:  178-block  6
    %%%%%:  178-block  7
    %%%%%:  178-block  8
        -:  179:
        -:  180:      __attribute__((__always_inline__))
        -:  181:#if __cpp_constexpr_dynamic_alloc
        -:  182:      constexpr
        -:  183:#endif
      56*:  184:      ~allocator() _GLIBCXX_NOTHROW { }
    $$$$$:  184-block  0
    $$$$$:  184-block  1
    $$$$$:  184-block  2
    %%%%%:  184-block  3
    $$$$$:  184-block  4
    $$$$$:  184-block  5
    $$$$$:  184-block  6
    $$$$$:  184-block  7
    $$$$$:  184-block  8
    $$$$$:  184-block  9
    $$$$$:  184-block 10
    $$$$$:  184-block 11
    %%%%%:  184-block 12
    %%%%%:  184-block 13
    %%%%%:  184-block 14
    %%%%%:  184-block 15
    $$$$$:  184-block 16
    $$$$$:  184-block 17
    $$$$$:  184-block 18
    $$$$$:  184-block 19
    $$$$$:  184-block 20
    %%%%%:  184-block 21
    %%%%%:  184-block 22
    %%%%%:  184-block 23
    %%%%%:  184-block 24
    $$$$$:  184-block 25
    $$$$$:  184-block 26
    $$$$$:  184-block 27
    $$$$$:  184-block 28
    $$$$$:  184-block 29
    $$$$$:  184-block 30
    %%%%%:  184-block 31
    $$$$$:  184-block 32
    $$$$$:  184-block 33
    %%%%%:  184-block 34
    $$$$$:  184-block 35
    $$$$$:  184-block 36
    $$$$$:  184-block 37
    %%%%%:  184-block 38
    $$$$$:  184-block 39
    %%%%%:  184-block 40
    $$$$$:  184-block 41
    %%%%%:  184-block 42
    %%%%%:  184-block 43
    %%%%%:  184-block 44
    %%%%%:  184-block 45
    %%%%%:  184-block 46
    %%%%%:  184-block 47
    %%%%%:  184-block 48
    $$$$$:  184-block 49
    $$$$$:  184-block 50
    $$$$$:  184-block 51
    $$$$$:  184-block 52
    $$$$$:  184-block 53
    $$$$$:  184-block 54
    $$$$$:  184-block 55
        -:  185:
        -:  186:#if __cplusplus > 201703L
        -:  187:      [[nodiscard,__gnu__::__always_inline__]]
        -:  188:      constexpr _Tp*
        -:  189:      allocate(size_t __n)
        -:  190:      {
    #####:  191:	if (std::__is_constant_evaluated())
    %%%%%:  191-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  191-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%:  191-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    %%%%%:  191-block  3
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%:  191-block  4
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed
    %%%%%:  191-block  5
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed
    %%%%%:  191-block  6
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed
call   30 never executed
branch 31 never executed (fallthrough)
branch 32 never executed
    %%%%%:  191-block  7
call   33 never executed
branch 34 never executed (fallthrough)
branch 35 never executed
    %%%%%:  191-block  8
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed
    %%%%%:  191-block  9
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  191-block 10
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed
        -:  192:	  {
    #####:  193:	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    %%%%%:  193-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  193-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  193-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  193-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  193-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  193-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  193-block  6
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%:  193-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%:  193-block  8
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%:  193-block  9
branch 18 never executed (fallthrough)
branch 19 never executed
    %%%%%:  193-block 10
branch 20 never executed (fallthrough)
branch 21 never executed
    %%%%%:  193-block 11
branch 22 never executed (fallthrough)
branch 23 never executed
    %%%%%:  193-block 12
branch 24 never executed (fallthrough)
branch 25 never executed
    %%%%%:  193-block 13
branch 26 never executed (fallthrough)
branch 27 never executed
    %%%%%:  193-block 14
branch 28 never executed (fallthrough)
branch 29 never executed
    #####:  194:	      std::__throw_bad_array_new_length();
    %%%%%:  194-block  0
call    0 never executed
    %%%%%:  194-block  1
call    1 never executed
    %%%%%:  194-block  2
call    2 never executed
    %%%%%:  194-block  3
call    3 never executed
    %%%%%:  194-block  4
call    4 never executed
    %%%%%:  194-block  5
call    5 never executed
    %%%%%:  194-block  6
call    6 never executed
    %%%%%:  194-block  7
call    7 never executed
    %%%%%:  194-block  8
call    8 never executed
    %%%%%:  194-block  9
call    9 never executed
    %%%%%:  194-block 10
call   10 never executed
    %%%%%:  194-block 11
call   11 never executed
    %%%%%:  194-block 12
call   12 never executed
    %%%%%:  194-block 13
call   13 never executed
    %%%%%:  194-block 14
call   14 never executed
    #####:  195:	    return static_cast<_Tp*>(::operator new(__n));
    %%%%%:  195-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  195-block  1
    %%%%%:  195-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  195-block  3
    %%%%%:  195-block  4
call    6 never executed
    %%%%%:  195-block  5
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  195-block  6
    %%%%%:  195-block  7
call   10 never executed
    %%%%%:  195-block  8
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  195-block  9
    %%%%%:  195-block 10
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  195-block 11
    %%%%%:  195-block 12
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  195-block 13
    %%%%%:  195-block 14
call   20 never executed
    %%%%%:  195-block 15
call   21 never executed
    %%%%%:  195-block 16
call   22 never executed
    %%%%%:  195-block 17
call   23 never executed
    %%%%%:  195-block 18
call   24 never executed
    %%%%%:  195-block 19
call   25 never executed
branch 26 never executed (fallthrough)
branch 27 never executed (throw)
    %%%%%:  195-block 20
    %%%%%:  195-block 21
call   28 never executed
        -:  196:	  }
        -:  197:
    #####:  198:	return __allocator_base<_Tp>::allocate(__n, 0);
    %%%%%:  198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  198-block  1
    %%%%%:  198-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  198-block  3
    %%%%%:  198-block  4
call    6 never executed
    %%%%%:  198-block  5
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  198-block  6
    %%%%%:  198-block  7
call   10 never executed
    %%%%%:  198-block  8
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%:  198-block  9
    %%%%%:  198-block 10
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%:  198-block 11
    %%%%%:  198-block 12
call   17 never executed
branch 18 never executed (fallthrough)
branch 19 never executed (throw)
    %%%%%:  198-block 13
    %%%%%:  198-block 14
call   20 never executed
    %%%%%:  198-block 15
call   21 never executed
    %%%%%:  198-block 16
call   22 never executed
    %%%%%:  198-block 17
call   23 never executed
    %%%%%:  198-block 18
call   24 never executed
    %%%%%:  198-block 19
call   25 never executed
branch 26 never executed (fallthrough)
branch 27 never executed (throw)
    %%%%%:  198-block 20
    %%%%%:  198-block 21
call   28 never executed
        -:  199:      }
        -:  200:
        -:  201:      [[__gnu__::__always_inline__]]
        -:  202:      constexpr void
        -:  203:      deallocate(_Tp* __p, size_t __n)
        -:  204:      {
    #####:  205:	if (std::__is_constant_evaluated())
    $$$$$:  205-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  205-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%:  205-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  205-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    %%%%%:  205-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$:  205-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed
    %%%%%:  205-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed
    $$$$$:  205-block  7
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed
call   30 never executed
branch 31 never executed (fallthrough)
branch 32 never executed
call   33 never executed
branch 34 never executed (fallthrough)
branch 35 never executed
    %%%%%:  205-block  8
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed
    %%%%%:  205-block  9
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  205-block 10
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed
    %%%%%:  205-block 11
call   45 never executed
branch 46 never executed (fallthrough)
branch 47 never executed
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed
    %%%%%:  205-block 12
call   51 never executed
branch 52 never executed (fallthrough)
branch 53 never executed
    %%%%%:  205-block 13
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed
    %%%%%:  205-block 14
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed
    %%%%%:  205-block 15
call   60 never executed
branch 61 never executed (fallthrough)
branch 62 never executed
    %%%%%:  205-block 16
call   63 never executed
branch 64 never executed (fallthrough)
branch 65 never executed
    %%%%%:  205-block 17
call   66 never executed
branch 67 never executed (fallthrough)
branch 68 never executed
call   69 never executed
branch 70 never executed (fallthrough)
branch 71 never executed
        -:  206:	  {
    #####:  207:	    ::operator delete(__p);
    $$$$$:  207-block  0
call    0 never executed
    %%%%%:  207-block  1
call    1 never executed
    %%%%%:  207-block  2
call    2 never executed
    %%%%%:  207-block  3
call    3 never executed
    %%%%%:  207-block  4
call    4 never executed
    %%%%%:  207-block  5
call    5 never executed
    $$$$$:  207-block  6
call    6 never executed
    %%%%%:  207-block  7
call    7 never executed
    %%%%%:  207-block  8
call    8 never executed
    $$$$$:  207-block  9
call    9 never executed
    %%%%%:  207-block 10
call   10 never executed
    %%%%%:  207-block 11
call   11 never executed
    %%%%%:  207-block 12
call   12 never executed
    %%%%%:  207-block 13
call   13 never executed
    %%%%%:  207-block 14
call   14 never executed
    %%%%%:  207-block 15
call   15 never executed
    %%%%%:  207-block 16
call   16 never executed
    %%%%%:  207-block 17
call   17 never executed
    %%%%%:  207-block 18
call   18 never executed
    %%%%%:  207-block 19
call   19 never executed
    %%%%%:  207-block 20
call   20 never executed
    %%%%%:  207-block 21
call   21 never executed
    %%%%%:  207-block 22
call   22 never executed
    %%%%%:  207-block 23
call   23 never executed
    #####:  208:	    return;
        -:  209:	  }
    #####:  210:	__allocator_base<_Tp>::deallocate(__p, __n);
    $$$$$:  210-block  0
call    0 never executed
    %%%%%:  210-block  1
call    1 never executed
    %%%%%:  210-block  2
call    2 never executed
    %%%%%:  210-block  3
call    3 never executed
    %%%%%:  210-block  4
call    4 never executed
    %%%%%:  210-block  5
call    5 never executed
    $$$$$:  210-block  6
call    6 never executed
    %%%%%:  210-block  7
call    7 never executed
    %%%%%:  210-block  8
call    8 never executed
    $$$$$:  210-block  9
call    9 never executed
    %%%%%:  210-block 10
call   10 never executed
    %%%%%:  210-block 11
call   11 never executed
    %%%%%:  210-block 12
call   12 never executed
    %%%%%:  210-block 13
call   13 never executed
    %%%%%:  210-block 14
call   14 never executed
    %%%%%:  210-block 15
call   15 never executed
    %%%%%:  210-block 16
call   16 never executed
    %%%%%:  210-block 17
call   17 never executed
    %%%%%:  210-block 18
call   18 never executed
    %%%%%:  210-block 19
call   19 never executed
    %%%%%:  210-block 20
call   20 never executed
    %%%%%:  210-block 21
call   21 never executed
    %%%%%:  210-block 22
call   22 never executed
    %%%%%:  210-block 23
call   23 never executed
        -:  211:      }
        -:  212:#endif // C++20
        -:  213:
        -:  214:      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
        -:  215:      bool
        -:  216:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
    #####:  217:      { return true; }
        -:  218:
        -:  219:#if __cpp_impl_three_way_comparison < 201907L
        -:  220:      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
        -:  221:      bool
        -:  222:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  223:      { return false; }
        -:  224:#endif
        -:  225:
        -:  226:      // Inherit everything else.
        -:  227:    };
        -:  228:
        -:  229:  /** Equality comparison for std::allocator objects
        -:  230:   *
        -:  231:   * @return true, for all std::allocator objects.
        -:  232:   * @relates std::allocator
        -:  233:   */
        -:  234:  template<typename _T1, typename _T2>
        -:  235:    __attribute__((__always_inline__))
        -:  236:    inline _GLIBCXX20_CONSTEXPR bool
        -:  237:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  238:    _GLIBCXX_NOTHROW
        -:  239:    { return true; }
        -:  240:
        -:  241:#if __cpp_impl_three_way_comparison < 201907L
        -:  242:  template<typename _T1, typename _T2>
        -:  243:    __attribute__((__always_inline__))
        -:  244:    inline _GLIBCXX20_CONSTEXPR bool
        -:  245:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  246:    _GLIBCXX_NOTHROW
        -:  247:    { return false; }
        -:  248:#endif
        -:  249:
        -:  250:  /// @cond undocumented
        -:  251:
        -:  252:  // Invalid allocator<cv T> partial specializations.
        -:  253:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  254:  template<typename _Tp>
        -:  255:    class allocator<const _Tp>
        -:  256:    {
        -:  257:    public:
        -:  258:      typedef _Tp value_type;
        -:  259:      allocator() { }
        -:  260:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  261:    };
        -:  262:
        -:  263:  template<typename _Tp>
        -:  264:    class allocator<volatile _Tp>
        -:  265:    {
        -:  266:    public:
        -:  267:      typedef _Tp value_type;
        -:  268:      allocator() { }
        -:  269:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  270:    };
        -:  271:
        -:  272:  template<typename _Tp>
        -:  273:    class allocator<const volatile _Tp>
        -:  274:    {
        -:  275:    public:
        -:  276:      typedef _Tp value_type;
        -:  277:      allocator() { }
        -:  278:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  279:    };
        -:  280:  /// @endcond
        -:  281:
        -:  282:  /// @} group allocator
        -:  283:
        -:  284:  // Inhibit implicit instantiations for required instantiations,
        -:  285:  // which are defined via explicit instantiations elsewhere.
        -:  286:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  287:  extern template class allocator<char>;
        -:  288:  extern template class allocator<wchar_t>;
        -:  289:#endif
        -:  290:
        -:  291:  // Undefine.
        -:  292:#undef __allocator_base
        -:  293:
        -:  294:_GLIBCXX_END_NAMESPACE_VERSION
        -:  295:} // namespace std
        -:  296:
        -:  297:#endif
