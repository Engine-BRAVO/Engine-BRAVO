@startuml audioPackageClassDiagram

package Audio{
    class Component_Proxy {}

class AudioSource implements Component_Proxy{
    - mFileName : string
    - mPlayOnAwake : bool
    - mLoop : bool
    - mVolume : int
    - mXDirection : int
    - minXDirection : const static int
    - maxXDirection : const static int
    + AudioSource(string aPath, bool aIsMusic=false)
    + play(bool aLooping=false) : void
    + stop() : void 

    + setPlayOnWake(bool aValue) : void
    + getPlayOnWake() : bool
    + setLooping(bool aLooping) : void
    + getLooping() : bool
    + setVolume(unsigned aVolume) : void
    + getVolume() : unsigned
    + setXDirection(int aXDirection) : void
    + getXDirection() : int
}

interface IAudioFacade {
    + loadSound(const string &aPath) : virtual void
    + loadMusic(const string &aPath) : virtual void
    + unloadAll() : virtual void
    + soundIsLoaded(const string &aPath) virtual bool
    + musicIsLoaded(const string &aPath) : virtual bool
    
    + playSound(const string &aPath, int aLooping, unsigned aVolume, int aDirection) : virtual void
    + playMusic(int aVolume) : virtual void
    
    + stopMusic() : virtual void
    
    + isPlaying(const string &aPath) : virtual bool
}

class MixerFacade implements IAudioFacade {
    - mChannelCount : const unsigned
    - mLastUsedChannel : unsigned
    - findAvailableChannel() : int
    - distanceToAngle(int aDirection) : int
    - calcDirection(int aListenerX, int aSoundX, float aScale) : int
}

class MixerContainer {
    // string is the path
    - mSfx : unordered_map<string, Mix_Chunk*>
    - mMusic : Mix_Music*
    + MixerContainer()
    + ~MixerContainer()
    + addSound(string aPath, Mix_Chunk *aSound) : void
    + getSound(string aIndex) : Mix_Chunk*
    + getSound(string aIndex) : const Mix_Chunk*
    + addMusic(Mix_Music *aMusic) : void
    + getMusic() : Mix_Music*
    + getMusic() : const Mix_Music*
    + clear() : void
}

MixerFacade *-- MixerContainer

}

Audio *--IAudioFacade

@enduml