@startuml

' skinparam linetype ortho
skinparam groupInheritance 2

together{

class Component{
    - mActive : bool

}

class AudioSource{
    + void play(??? aLooping)
    + void stop()

    - mAudioClip : string
    - mPlayOnAwake : bool
    - mLoop : bool
    - mVolume : ???
}

class Collider{
    ' Relative to position of GameObject
    - mPosition : Point 
}

class CircleColider{
    ' Position is middle of circle
    - mRadius : float 
}

class BoxCollider{
    ' Position is middle of box
    - mWidth : float
    - mHeight : float
    - mRotation : float
}

enum bodyType{
    STATIC
    DYNAMIC
}
class RigidBody{
    - mMass : float
    - mGravityScale : float
    - mBodyType : Enum bodyType
}

interface BehavourScript{
    + {abstract} void onStart()
    + {abstract} void onUpdate()
}

class Sprite{
    + void render()

    - mSprite : string
    - mColor : ???
    - mflipX : bool
    - mflipY : bool
    - mSortingLayer : ???
    - mOrderinLayer : ???

}

class Texture {
    - SDLTexture : ???
}


class Animator{
    + void play(??? aLooping)
    + void stop()

    - mFps : ???
}
}
class GameObject{
    + void addComponent(??? aComponent)
    + bool isActiveInWorld()
    + bool isActiveSelf()

    - mName : string
    - mTag : string
    - mActive : bool
    - mLayer : ???
}

class FSConverter {
    + FSConverter(string) : FSConverter
    + getResourcePath(const std::string& resourceName) : string
    - findResourcesFolder() : string
    - executablePath() : string
    - resourceDir : string
}

class ResourceManager {
    + void loadTextures()
    + void loadAudio()
}

class SceneManager {
    + addScene(const Scene& scene) : int
    + addSceneLevel(Map& map) : int
    + loadScene(int index) : void
    + loadScene(const std::string& sceneName) : void
    + getCurrentScene() : Scene*
    - SceneManager()
    - scenes : vector<Scene>
    - currentSceneIndex : int
}

class SaveGameManager {
    - mSaveGames : vector<SaveGame> 
    - SaveGameManager()
    + createSaveGame(const string &aId, const string &aPath) : SaveGame&
    + getSaveGame(const string &aId) : SaveGame&
    + deleteSaveGame(const string &aId, bool aDeleteFile) : void
}

class AnimationManager {
    + updateAnimations(Scene &scene) : void
}

class SaveGame {
    - mFileName : string
    - mFields : vector<SaveField>
    - mArrays : vector<SaveArray>
    + SaveGame(const string &aFileName)
    + store() : void
    + remove() : void
    + addField(string name, string value) : void
    + setField(string name, string value) : void
    + getField(string name) : SaveField&
    + getField(string name) : string
    + addArray(string name) : void
    + setArray(string name, SaveArray value) : void
    + getArray(string name) : SaveArray&
}

class SaveField {
    - mName : string
    - mValue : string
    + SaveField(string name)
    + getName() : string
    + setValue(string) : void
    + getValue() : string
}

class SaveArray {
    - mName : string
    - mFields : vector<SaveField>
    + SaveArray(string name)
    + getName() : string
    + addField(string name, string value) : void
    + setField(string name, string value) : void
    + getField(string name) : string
}

class Scene {
    + void addGameObject(GameObject object)
    + void removeGameObject(int id)
    + GameObject& getGameObject(int id)
    + int addCamera()
    + void removeCamera(int id)
    + Camera& getCamera(int id)
    + void setActiveCamera(int id)
    - sceneName : string
    - gameObjects : vector<GameObject>
    - activeCameraIndex : int
    - cameras : vector<Camera>(1)
}

class EngineBravo {
    +void initialize()
    - SceneManager sceneManager
    + SceneManager& getSceneManager()
    - SaveGameManager saveGameManager
    + runBehaviourScripts() : void
}


class Camera{
    - mBackgroundColor : Color
    ' Width and Height are rendered area in Game Units
    - mWidth : int
    - mHeight : int

}

class Renderer {
    - mResolution : Point
    + render(const Scene& scene) : void
    + render(const Scene& scene, int layer) : void
    + clear() : void
    + setResolution(Point resolution) : void
}

together{
class UIObject{
    - mWidth : int
    - mHeight : int
}

class Button{
    - mInteractable : bool
    - mOnClick : ???
}

class Text{
    - mText : string
    - mFont : ???
    - mSize : ???
    - mAllignment : ???
    - mColor : ???
}

class UIManager {
    - mClickableButtons : vector<UIObject&>
    + bool ClickableButtonPressed()
    + bool checkIsClickableButton()
    + void addClickableButton((UIObject& aButton))
    + void removeClickableButton(std::string ID)
}
}

class iMouseListener{
    + ??? onMouseMoved()
    + ??? onMouseClicked()
    + ??? onMousePressed()
    + ??? onMouseReleased()
}

class iKeyListener{
    + ??? onKeyPressed()
    + ??? onKeyReleased()
}

class Transform{
    - mPosition : Point
    - mRotation : float
    - mScale : Point
}

together{
class Input{}

class Time{}

class Debug{}
}

class Point{
    - x : float
    - y : float
}

class Color{
    - r : int
    - g : int
    - b : int
    - a : int
}

Component <|-down- AudioSource
Component <|-down- Collider
Component <|-down- RigidBody
Component <|-down- BehavourScript
Component <|-down- Sprite
Component <|-down- Animator

Collider <|-- CircleColider
Collider <|-- BoxCollider

GameObject *-up- "0..*" AudioSource
GameObject *-up- "0..*" CircleColider
GameObject *-up- "0..*" BoxCollider
GameObject *-up- "0..*" RigidBody
GameObject *-up- "0..*" BehavourScript
GameObject *-up- "0..1" Sprite
GameObject *-up- "0..*" Animator
GameObject -up- Transform
GameObject "0..1"<-- "0..*" GameObject : +parent >

GameObject <|-- UIObject
UIObject <|-- Button
UIObject <|-- Text

Scene --> "0..*" GameObject
Camera --|> GameObject
Camera "1..*" -down->  Scene

Animator "0..1" ..> "1..*" Sprite

SaveGameManager *-- "*" SaveGame
SaveGame *-- "*" SaveField
SaveGame *-- "*" SaveArray
SaveArray *-- "*" SaveField
Renderer --> Scene
SceneManager *-- "*" Scene

EngineBravo *-- "1" SceneManager : creates
EngineBravo *-- "1" SaveGameManager : creates
EngineBravo *-- "1" AnimationManager : creates
@enduml
