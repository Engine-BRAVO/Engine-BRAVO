@startuml

' skinparam linetype ortho
skinparam groupInheritance 2

package Components{

class Component{
    - mActive : bool

}

class AudioSource{
    + void play(??? aLooping)
    + void stop()

    - mAudioClip : string
    - mPlayOnAwake : bool
    - mLoop : bool
    - mVolume : ???
}

class Collider{
    ' Relative to position of GameObject
    - mPosition : Point 
}

class CircleColider{
    ' Position is middle of circle
    - mRadius : float 
}

class BoxCollider{
    ' Position is middle of box
    - mWidth : float
    - mHeight : float
    - mRotation : float
}

enum BodyType{
    STATIC
    DYNAMIC
}

class RigidBody{
    + setMass(float aMass) : void
    + getMass() : float
    + setBodyType(BodyType aBodyType) : void
    + getBodyType() : BodyType
    + setGravityScale(float aGravityScale) : void
    + getGravity() : float
    - mMass : float
    - mGravityScale : float
    - mBodyType : Enum bodyType
}

interface IBehavourScript{
    + {abstract} void onStart()
    + {abstract} void onUpdate()
}

class Sprite{
    + render() : void
    + setFlipX(bool) : void
    + getFlipX() : bool
    + setFlipY(bool) : void
    + getFlipY() : bool

    - mSprite : string
    - mColor : Color
    - mflipX : bool
    - mflipY : bool
    - mSortingLayer : ???
    - mOrderinLayer : ???

}

class Texture {
    - SDLTexture : ???
}


class Animator{
    + play(??? aLooping) : void
    + stop() : void

    - mFps : ???
}

}

class GameObject{
    + addComponent(Component* aComponent) : void
    + isActiveInWorld() : bool
    + isActiveSelf() : bool
    + setID(int aId) : void
    + getID() : int
    + setName(string aName) : void
    + getName() : string
    + setTag(string aTag) : void
    + getTag() : string
    + setIsActive(bool aIsActive) : void
    + getIsActive() : bool
    + hasComponenent() const : template<typename T> bool
    + getComponent() const : template<typename T> T*
    + addComponent(Args&&... args) : template<typename T, typename... Args> T*

    - mComponents : vector<Component*>
    - mName : string
    - mTag : string
    - mIsActive : bool
    - mLayer : ???
    - mID : int
}

struct Transform{
    - mPosition : Point
    - mRotation : float
    - mScale : Point
}

package Save{
class SaveGame {
    - mFileName : string
    - mFields : vector<SaveField>
    - mArrays : vector<SaveArray>
    + SaveGame(const string &aFileName)
    + store() : void
    + remove() : void
    + addField(string aName, string aValue) : void
    + setField(string aName, string aValue) : void
    + getField(string aName) : SaveField&
    + getField(string aName) : string
    + addArray(string aName) : void
    + setArray(string aName, SaveArray value) : void
    + getArray(string aName) : SaveArray&
}

class SaveField {
    - mName : string
    - mValue : string
    + SaveField(string aName)
    + getName() : string
    + setValue(string aValue) : void
    + getValue() : string
}

class SaveArray {
    - mName : string
    - mFields : vector<SaveField>
    + SaveArray(string aName)
    + getName() : string
    + addField(string aName, string aValue) : void
    + setField(string aName, string aValue) : void
    + getField(string aName) : string
}
}

class Scene {
    + addGameObject(GameObject* aObject) : void
    + removeGameObject(int aId) : void
    + getGameObject(int aId) : GameObject&
    + addCamera() : int
    + removeCamera(int id) : void
    + getCamera(int id) : Camera&
    + setActiveCamera(int id) : void
    + getID() : int
    + getName() : string
    + getGameObjects() : vector<GameObject*>& 

    - Scene(string aSceneName, int aSceneID)
    - mSceneName : string
    - mGameObjects : vector<GameObject*>
    - mSceneID = -1 : int
    - activeCameraIndex : int
    - cameras : vector<Camera>(1)
}

package Engine{

class EngineBravo {
    + initialize() : void
    + run() : void
    + getSceneManager() : SceneManager&
    + runBehaviourScripts() : void

    - mSaveGameManager : SaveGameManager 
    - mSceneManager : SceneManager
    - mResourceManager : ResourceManager
    - mAnimationManager : AnimationManager
    - mUIManager : UIManager
    - mRenderer : Renderer
}

class ResourceManager {
    - ResourceManager()
    + loadTextures() : void
    + loadAudio() : void
}

class SceneManager {
    + addScene(const Scene& scene) : int
    + addSceneLevel(Map& map) : int
    + loadScene(int index) : void
    + loadScene(const std::string& sceneName) : void
    + getCurrentScene() : Scene*
    + createScene(std::string aSceneName, int aSceneID = -1) : Scene*
    - SceneManager()
    - sceneNameExists(string aSceneName) : bool
    - sceneIDExists(int aSceneID) : bool
    - getNewSceneID() : int
    - mScenes : vector<unique_ptr<Scene>>
    - mCurrentSceneIndex : int
}

class SaveGameManager {
    - SaveGameManager()
    + createSaveGame(const string &aId, const string &aPath) : SaveGame&
    + getSaveGame(const string &aId) : SaveGame&
    + deleteSaveGame(const string &aId, bool aDeleteFile) : void
    - mSaveGames : vector<SaveGame> 
}

class AnimationManager {
    + updateAnimations(Scene &scene) : void
    - AnimationManager()
}

class UIManager {
    - mClickableButtons : vector<UIObject&>
    + ClickableButtonPressed() : bool
    + checkIsClickableButton() : bool
    + addClickableButton((UIObject& aButton)) : void
    + removeClickableButton(std::string ID) : void
    - UIManager()
}

}


class Camera{
    - mBackgroundColor : Color
    ' Width and Height are rendered area in Game Units
    - mWidth : int
    - mHeight : int

}

class Renderer {
    + render(const Scene* aScene) : void
    + render(const Scene* aScene, int aLayer) : void
    + clear() : void
    + setResolution(Point aResolution) : void

    - mResolution : Point
}

package UI{
class UIObject{
    - mWidth : int
    - mHeight : int
}

class Button{
    - mInteractable : bool
    - mOnClick : ???
}

class Text{
    - mText : string
    - mFont : ???
    - mSize : ???
    - mAllignment : ???
    - mColor : ???
}
}

package Input{
class iMouseListener{
    + ??? onMouseMoved()
    + ??? onMouseClicked()
    + ??? onMousePressed()
    + ??? onMouseReleased()
}

class iKeyListener{
    + ??? onKeyPressed()
    + ??? onKeyReleased()
}
}

package global{
class Input{}

class Time{}

class Debug{}

struct Point{
    - x : float
    - y : float
}

class Color{
    - r : int
    - g : int
    - b : int
    - a : int
}

class FSConverter {
    + FSConverter(string) : FSConverter
    + getResourcePath(const std::string& resourceName) : string
    - findResourcesFolder() : string
    - executablePath() : string
    - resourceDir : string
}
}

Component <|-down- AudioSource
Component <|-down- Collider
Component <|-down- RigidBody
Component <|-down- IBehavourScript
Component <|-down- Sprite
Component <|-down- Animator

Collider <|-- CircleColider
Collider <|-- BoxCollider

GameObject *-up- "0..*" AudioSource
GameObject *-up- "0..*" CircleColider
GameObject *-up- "0..*" BoxCollider
GameObject *-up- "0..*" RigidBody
GameObject *-up- "0..*" IBehavourScript
GameObject *-up- "0..1" Sprite
GameObject *-up- "0..*" Animator
GameObject *-up- "1" Transform
GameObject "0..1"<-- "0..*" GameObject : +parent >

GameObject <|-- UIObject
UIObject <|-- Button
UIObject <|-- Text

Scene --> "0..*" GameObject
Camera --|> GameObject
Camera "1..*" -down->  Scene

Animator "0..1" ..> "1..*" Sprite

SaveGameManager *-- "*" SaveGame
SaveGame *-- "*" SaveField
SaveGame *-- "*" SaveArray
SaveArray *-- "*" SaveField
Renderer --> Scene
SceneManager *-- "*" Scene
UIManager *-- "*" UIObject
AnimationManager *-- "*" Animator

EngineBravo *-- "1" SceneManager : creates
EngineBravo *-- "1" SaveGameManager : creates
EngineBravo *-- "1" AnimationManager : creates
EngineBravo *-- "1" UIManager : creates
EngineBravo *-- "1" ResourceManager : creates
@enduml
