­All code and comments are in Great Britain English. Not American English. So these are right: colour, centre, initialiser. These are wrong: color, center, initializer.
-Every comma is followed by a space, so for example
	myFunction(5, 7, 8)
-Spaces around operators, so for example 5 + 7 instead of 5+7
-Tabs have the same size as four spaces. Tabs are stored as tabs, not as spaces.
-Functions and static variables are in the same order in the .h and .cpp files .
???Use #pragma once instead of include guards (we recently switched to this so you will still see a lot of old include guards in our code).
-Try to make short functions, preferably no more than 50 lines.
-Avoid making very large classes. Split a class whenever you anticipate the class will grow a lot and you can cleanly split it. In general, try to keep class sizes below 750 lines. However, don't split a class if the split would result in messy code. Some examples of messy divorces are: too tightly coupled classes, friend classes and complex class hierarchies.
-Use forward declaration where possible: put as few includes in header-files as possible. Use class Bert; instead and move the #include "Bert.h" to the .cpp-file.
-Includes and forward declarations are grouped as follows:
	Forward declarations from our own code (in alphabetical order)
	Includes from our own code (in alphabetical order)
	Empty line
	Per library:
		Forward declarations from that library (in alphabetical order)
		Includes from that library (in alphabetical order)
-The include of the .h-file belonging to this .cpp file is always at the top.
-Do not define static variables in a function. Use (static) class member variables instead.
???Everything must be const correct.
-Names of variables and functions should be descriptive. Long names are no problem, undescriptive names are. Only use abbreviations if they are very clear and commonly known.
The first letter of classes, structs and enum type names is a capital. Variables and functions start without a capital. Each further word in a name starts with a captical. Do not use underscores ( _ ) in variable names. So like this:
		class MyClass
		{
			void someFunction();
			int someVariable;
		};
Member variables start with a lowercase m like mMember and arguments start with a lowercase a like aArgument
-Implementation of functions is never in .h-files.
???Templatised functions that cannot be implemented in the .cpp file are implemented in an extra header file that is included from the main header file. Such a class can have 3 files: MyClass.h, MyClassImplementation.h and MyClass.cpp. So like this:
	class MyClass
	{
		template
		void doStuff(T thingy);
	};
	#include "MyClassImplementation.h"
-Start template typenames with T. If more info is relevant, you can add words after that, like TString.
-Several classes can never be defined in the same header file, except if a class is part of another class (i.e. defined inside the other class).
-Between functions there are two empty lines.
-Use empty lines to structure and group code for readability.
-Add loads of comments to code.
-Write a short explanation of what a class does above each class. Especially make sure to explain relations there (e.g. “This class helps class X by doing Y for him”).
-Write comments above classes and functions with /// instead of // (this way the Linux tools will also show info when hoovering over code).
-Curly braces { and } always get their own line, so they are not put on the same line as the if or the for. The only exception is if you have lots of similar single line if-statements right beneath each other. In that case it is okay to put them on a single line. Like in this example:
	if      ( banana &&  kiwi && length > 5) return cow;
	else if ( banana && !kiwi && length > 9) return pig;
	else if (!banana && !kiwi && length < 7) return duck;
	else                                     return dragon;
-When writing a do-while function, put the while on the same line as the closing brace:
	do
	{
		blabla;
	} while (bloebloe);
-Indent switch statements like this:
switch (giraffeCount)
	{
		case 1: text = "one giraffe";  break;
		case 2: text = "two giraffes"; break;
		case 3:
			// If it's more than one line of code
			doStuffOnSeveralLines;
			text = "three giraffes";
			break;
		case 4:
		{
			// If you need more structure for readability, add curly braces
			int x = getComplexThing();
			text = "quadruple giraffe";
			break;
		}
	}
-Function parameters have the exact same names in the .h and the .cpp files.
-Precompiler instructions (everything starting with #) should be kept to a minimum, except of course for #include and #pragma once
-Do not write macros.
-Variables inside functions are declared at the point where they are needed, not all of them at the start of the function.
-In constructors, prefer using initialiser lists above setting variables in the body of the constructor. Each initialisation in the initialiser list gets its own line (see the example for exact formatting). Make sure variables in the initialiser lists are in the same order as in the class definition in the .h-file.
-Do not use RTTI (so do not use dynamic_cast). RTTI costs a little bit of performance, but more important is that RTTI is almost always an indication of bad object oriented design.
-Use reinterpret_cast and const_cast only when absolutely necessary.
-Do not commit code that does not compile without errors or warnings (and do not disable warnings/errors either).
-Do not commit code that breaks existing functionality.
-No global variables.
-Always use namespaces explicitely. Do not put things like using namespace std in code.
-Never ever even think of using goto statements. We have a thought detector and will electrocute you if you do.
-Don't use the comma-operator, like in if (i += 7, i < 10)
-Don't use Unions.
-Don't use function pointers, except where other libraries (like STL sort) require it.
-Only use the ternary operator (like for example print(i > 5 ? “big” : “small”); ) in extremely simple cases. Never nest the ternary operator.
-When exposing a counter for an artist or designer it starts at 0, just like it does for normal arrays in code. Some old tools might still start at 1 but anything newly developed for artists starts at 0.
-Use NULL instead of 0 for pointers.
-When checking whether a pointer exists, make this explicit. So use if (myPointer != NULL) instead of if (myPointer).
-Use RAII (Resource Acquisition Is Initialization) where possible. So instead of creating a separate function initialise(), fully initialise the class in its constructor so that it is never in an incomplete state.
-Write the constructor and destructor together: write the corresponding delete for every new immediately, so you do not forget to do it later on.
-Class definitions begin with all the functions and then all the variables. The order is public/protected/private. This might mean you have to use the keywords public / protected / private several times (first for functions, then for variables).
-A class starts with its constructors, followed by its destructor. If these are private or protected, then they should still be at the top.
-When something has two options, but is not clearly true/false, then prefer using an enum class instead of a boolean. For example, for direction don't use bool isRight. Instead, use enum Direction with the values Left and Right.
-Make sure all code is framerate-independent
-Make the intended structure explicit and clear. For example, avoid doing things like this:
	if (yellow)
	{
		return banana;
	}
	return kiwi;
What was really intended here, was that depending on yellow, either banana or kiwi is returned. It is more readable to make this explicit like this:

	if (yellow)
	{
		return banana;
	}
	else
	{
		return kiwi;
	}
-Use nullptr instead of NULL.
-We only use auto for things like complex iterator types.
-Use range-based for where applicable, e.g. for (const Banana& ultimateFruit : myList). Note that it's important to type that reference when not working with pointers, since otherwise the Banana would be copied in this case.
-Use override and final wherever applicable.
-If a function is virtual, the virtual keyword should always be added to it, so not only in the parent class, but also in each version of the function in the child classes.
-Don't use rvalue references (&&) unless you really really really need them.
-Use unique_ptr wherever possible. If an object is not owned, then it's stored as a normal pointer. Avoid creating complex types in the initialiser list. Here's an example of how that works:
	class FruitManager
	{
	public:
		FruitManager(Kiwi* notMyFruit):
			notMyFruit(notMyFruit)
		{
			bestFruitOwnedHere.reset(new Banana());
		}
	private:
		Kiwi* notMyFruit;
		std::unique_ptr<Banana> bestFruitOwnedHere;
	};
Lambda's that are too big for a single line are indented like this:
	auto it = std::find_if(myVec.begin(),
						   myVec.end(),
						   [id = 42] (const Element& e)
						   { 
							   return e.id() == id;
						   });
-Don't use MyConstructor = delete.
-Every function uses an enum return to determin if the functions succeeded or failed. The enum can be extended with different options.